BANK DATABASE
consider the following database maintained by a Bank. The Bank maintains
information about its branches, customers and their loan applications.
Following are the tables:
branch (bid integer, brname char (30), breity char (10))
customer (cno integer, cname char (20), caddr char (35), city (20))
joan_application (Ino integer, lamtrequired money, lamtapproved money, |_date date)
» Therelationship is as follows:
branch, customer, loan_application are related with ternary relationship.
ternary (bid integer, cno integer, Ino integer).
Execution of Query:
Postgres = # select * from branch;
Output:
bid| brname | brcity
a ees __ anni 2 Aka
1 | CAMP | PUNE
2 | MGROAD | PUNE
(2 rows)
Execution of Query:

postgres=# select * from customer ;
Output:
cno| cname
wenne penn nnn ene nnn en nn
Execution of Query:
| caddr | city
a dpe merece nner en nenef eae eee
| CAMP | PUNE
| MGROAD .| PUNE
| KOTHRUD | PUNE
Postgres = # select * from loan_application;
Output:
Ino | lamtrequired | lamtapproved | |_date
none Tb rnc ec cnn m nnn nnn nn eih een nnnnennnnnennennn of nnneennneeneneeennnne
1 | $200,000.00 | $100,000.00 | 2016-03-01
2 | $500,000.00 | $300,000.00 | 2015-03-01
3 | $300,000.00 | $100,000.00 | 2017-02-01
(3 rows)
Execution of Query:
Postgres = # select * from ternary;
Output:
bid| cno | Ino
he Sees
1 |] 121 } 1
2| 2 | 2
2| 2 | 2
(3 rows)
Solve the following Queries:

1. Find the names of the customers for the “MGROAD” branch.
select cname from customer a, branch b, ternary c
where b.brname='MGROAD'
and a.cno=c.cno
and b.bid=c.bid;

Execution of Query:
postgres=# \i gq1.sql

Output:
cname

2. List the names of the customers who have received loan less than their requirement.
select cname from customer a, loan_application b, ternary c
where b.lamtapproved< lamtrequired
and a.cno=c.cno
and b.1no=c.1no;

Execution of Query:
| postgres-# \i q1.sql
output:
cname
KIRAN
AVINASH
(2 rows)
3, Find the maximum loan amount approved.
select max(lamtapproved) from loan_application ;
Execution of Query:
postgres-# \i qi.sql
Output:
max
$300,000.00
(1 row)
4. Find out the total loan amount sanctioned by “Camp “branch.
select c.bid, sum(lamtapproved) from branch a, loan_application b, ternary
c
where a.brname="CAMP'
and a.bid=c.bid
and b.1no=c.1no
group by c.bid;
Execution of Query:
postgres=# \i ql.sql
Output:
1 | 100,000.00
1 row)
5. Count the number of loan applications received by “MGROAD” branch.
select c.bid, Count(*) from branch a, loan_application b, ternary c
Where a.brname='MGROAD’ ~
and a.bid=c.bid
and b.1no=c.1no
group by c.bid;
Execution of Query:
Postgres=# \i qi.sql
Output:
bid | count
ae oy <eon ces ee
2| 1
(1 row)
Views:
14, Create a view which contains the details of all customers who have applied for a loan
more than = 100000.
create view V1 as
select cname from customer a, loan_application b , ternary ¢
where cast(lamtrequired as numeric) > 100000
and a.cno=c.cno ; :
and b.1no=c.1no
Execution of View:
postgres=# \i view1.sql
CREATE VIEW
postgres=# select * from v1;
Output:
cname
See a adhe ea eal
KIRAN
AVINASH
(2 rows)
2. Create a view which contains details of all loan applications from the ‘Shivajinagar’
branch.
create view V2 as
select a.brname,b.cname,c.lamtrequired,c.lamtapproved from branch: a;
customer b, loan_application c, ternary d
where a.bid=d.bid
and b.cno=d.cno
and c.lno=d. ino
Execution of View:
postgres=# \i view2.sql
CREATE VIEW
3 write the following Queries, on the above created views: |
(a) List the details of customers who have applied for a loan of 100000
Execution of View:
postgres = # select *
from v
2 where cast(lamtrequired as numeric) ?
19e80e;
- output:
brname | cname | lamtrequired | lamtapproved
th rene nennn neem nnn nn th vn enn n nnn nnn ne ne th nnn ne enna nana nnn nanan
| KIRAN | $200,000.00 | $100,000.00
MGROAD | AVINASH | $500,000.00 | $300,000.00
2 rows)
(b) List the details of loan applications from ‘MGROAD’, where loan amount is
>%10000. ‘
elect * from v2 where brname='MGROAD' :
and cast(lamtapproved as numeric) > 10@00@0;
Execution of View:
postgres=# \i v2.sql
Output:
brname |. cname | lamtrequired | lamtapproved
+ tf een an ene sens eneeeenn fp oon ennn n-ne 2 ee - === ===
MGROAD | AVINASH | $500,000.00 —| $300,000.00 .
(1 row)
(c) List the details of Loan applications, with the same loan amount.
select cname, lamtapproved from v2 where lamtapproved in
(select lamtapproved from v2 group by lamtapproved
having COUNT(*) > 1) .
Execution of View:
postgres=# \i v3.sql
Output:
cname | lamtapproved
KIRAN _—_|_ $300,000.00
SEEMA _| $100,000.00
(2 rows)
Stored Functions:
1. Writea function that returns the total number of customers of a particular branch.
(Accept branch name as input parameter). |
Create or replace function f1(name1 text) returns integer as
declare
Cnt integer;
begin
Select into cnt count(*) from branch a, customer b , ternary c
where a.brname=name1
and a.bid=c.bid
and b.cno=c.cno;
return cnt;
end;
“LANGUAGE ‘plpgsql';
Execution of Code:
postgres=# \i fl.sql
CREATE FUNCTION
postgres=# select f1('CAMP');
meeee eens
1 row)
Output:
(1 row)
2. Write a function to find the maximum loan amount approved.
create or replace function 2() returns text as '
declare . .
name text;
amt money;
begin
select into name gamt a. brname, max(lamtapproved)
loan_application b , ternary c
where a.bid=c.bid and b.1no=c.1no group by a.brname;
name := name || amt;
return name; .
end; oo
"LANGUAGE 'plpgsql';
from
As j
Sey |
branch 4
; execution of Code:
postgres=# \i f1.sql
CREATE FUNCTION
postgres=# select f2();
output:
rrors and Exceptions:
4 Write astored function to print the total number of customers of a particular branch. .
(Accept branch name as input parameter). In case the branch name is invalid, raise an

exception for the same.

create or replace function f6(name1 text) returns integer as '.
declare
cnt integer;
begin |
select into cnt count(*) from branch where brname=name1;
IF cnt = 9 THEN
RAISE EXCEPTION ‘‘’Invalid Branch Name %'' ,name1;
END IF; ‘
select into cnt count(*) from branch a, customer b , ternary c
where a.brname=name1
and a.bid=c.bid
and b.cno=c.cno;
return cnt;
end;
"LANGUAGE ’plpgsql’;
Execution of Code:
postgres=¥ \i h2.sql
CREATE FUNCTION
postgres=¥ select f6(’pune’);

ERROR: Invalid Branch Name pune
ee
A.7
|

Database Management Systems-ll (BCA Science — Ill) Ass|
—menty

2. Write a stored function to increase the loan approved amount for all loans by 29
case the initial loan approved amount was less than Rs 10000, then print a not; ln
the user, before updating the amount. ae
create or replace function #7() returns integer as '
declare

amt money;
begin
select into amt lamtapproved from loan application b , ternary c
where b.1no=c.1no;
IF cast(amt as numeric) < 10000 THEN
RAISE NOTICE '‘Amount less than 10000 '
Exit;
END IF;
update loan _application
set lamtapproved = lamtapproved + lamtapproved *0.2 ;
return @;
end; -

"LANGUAGE ‘plpgsql';

Execution of Code:
postgres=# \i ul.sql
CREATE FUNCTION
postgres=# select £7()3

Output:
£7
0
(1 row)
Execution of Code: OO
. postgres=# select * from loan_application;
Output:
Ino | lamtrequired | lamtapproved | 1_date
w---- dp eerem ee emenenmnnenef mennmmamen nese eee e eS op eeeeeneneneenenen
ee $200,000.00 | $100,000.00 | 2016-03-01
2 | $500,000.00 | $300,000.00 | 2015-03-01
3 | $300,000.00 | $100,000.00 | 2017-02-01 é 7
(3 rows) ee
triggers***************************************************************************
write a trigger before deleting a customer record from the customer table. Raise a
1.
notice and display the message “customer record is being deleted”.
create or replace function print_notice() returns trigger as‘
declare
begin
RAISE NOTICE '"'deleteing Customer data ..'';
return NULL;
end;
"LANGUAGE ‘plpgsql'; -
Execution of Code: i
CREATE TRIGGER check_. customers
BEFORE DELETE ON customer 7
FOR EACH ROW
EXECUTE PROCEDURE ae notice();
postgres=# \i t3-sql : : Fs
CREATE FUNCTION E35 : = : = : =
postgres=# \i t4.sql ; a 1g —— = AE 33
CREATE TRIGGER : : = fizine
Output: : : 2: =
postgres=# delete from customer where. cno=13
NOTICE: deleteing Customer data .-
DELETE @ ;
postgres=# ;
2. Write a trigger to ensure that the loan amount entered never < 1000 and greater than
1000000. /
create or replace function loan_data() returns trigger as"
declare
begin oo . .
numeric) < 1900 or cast(NEW.lamtapproved as

if cast(NEW.lamtapproved as

numeric) > 1ee@e0ee6 then
raise exception ‘'"' LOAN AMT is NOT VALID
end if;
return NEW;
end;
"LANGUAGE "plpgsql1';
. CREATE TRIGGER check_loan
BEFORE INSERT ON loan application
FOR EACH ROW
EXECUTE PROCEDURE loan_data();

A.9

ere
s
 

Database Management Systems-Il (BCA Sclence - III)

Execution of Code:
postgres=# \i li.sql
CREATE FUNCTION
postgres-# \i t2.sql
CREATE TRIGGER

Output:

postgres=# insert into  loan_application values(6,500,500, ‘2017.4.
14");

ERROR: LOAN AMT is NOT VALID

postgres=#
SSO SOK ay Ri ORES
Ss AN RASS LAN wi SAC BA
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
° Consider the following dtatiase maintained by a college. It gives information about —
students and the teachers along with the subject taught by the teacher and the marks j
obtained by the student in the subject. oo

e Following arethetables: _
student (sno integer, sname char(30), sclass char(10), saddr char(50))
teacher (tno integer, tname char (20), qualification char (15), experience integer)

e The relationship is as follows:

Student_teacher: M-M relation with descriptive attribute as subjett name and marks.
create table student
(
sno integer primary key,
sname char(30),
sclass char(10),
saddr char(50)
);
create table teacher
(
tno integer primary key,
tname char(30),
qualification char(15),
experience integer 
);
create table student_teacher
( 
sno integer references student(sno),
tno integer references teacher(tno),
subject char(30),
marks integer
);

insert into student values(1,'Amol','fybca','pune');
insert into student values(2,'Archana', 'fybca', 'pune' );
insert into student values(3,'kiran','sybca', 'pune');
insert into student values(4, 'Amar','sybca', 'pune');
insert into student values(5, 'Suresh', 'tybca', 'pune');

insert into teacher values(1, 'Kumar', 'PhD',10);
insert into teacher values(2, 'Veena', 'MPhil',16);
insert into teacher values(3, 'Ketaki','MCS',2);
insert into teacher values(4, 'Manisha', 'MCA',5);
insert into teacher values(5, 'Prakash', 'MCA',3);

insert into student_teacher values(5,1,'c',60);
insert into student_teacher values(4,1, 'c++',75);
insert into student_teacher values(2,1,'c',80); 
insert into student_teacher values(3,2,'DS',78);
insert into student_teacher values(4,3, 'ADBMS', 70);
insert into student_teacher values(5,3, 'ADBMS' ,50); 
insert into student_teacher values(1,4,'cn',66);
insert into student_teacher values(2,5,'se',73);
insert into student_teacher values(3,5,'se',85);

Execution of Query:
postgres=# select * from student; |

postgres=# select * from teacher;

postgres=# select * from student_teacher;

Solve the following queries:
1. Find the minimum experienced teacher.
select tname,experience from teacher
where experience= ( select min(experience) from teacher);


2 Sind re number of teachers having qualification 'Ph.D'
select count (*) from teacher
where qualification='PhD' ;

3.List the names of the students taught by “Mr. Kumar” along with the subjects taught.

select sname,subject
from student a,teacher b, student_teacher c

where tname'Kumar'
and a.sno=c.sno
and b.tno=c.tno;

4, Find the subjects taught by each teacher. 
select distinct c.tno,tname, subject
from teacher b, student_teacher c
where b.tno=c.tno
order by c.tno,tname, subject; 
_ Output:
tno | tname | _ subject
enact pee ONG seaba Sora
1 | Kumar | Cc
1 | Kumar | C++
2 | Veena | Ds
3 | Ketaki | ADBMS
4 |Manisha | CN

5.list the names of the teachers who are teaching to a student named “Suresh”.
select tname from student a, teacher b, student_teacher c
where sname='Suresh'
and a.sno=c.sno
and b.tno=c.tno;

6. List the names of all teachers along with the total number of students they are
teaching.
select c.tno,b.tname, count (c.tno)
from teacher b, student_ teacher c ; ee
where b.tno=c.tno
group by c.tno., b.tname;
Output:
tno | tname | count
+ 4 ---=o-
5 |Prakash | 2
3 | Ketaki leeed
4 |Manisha | 1
“4 [Kumar | 3
2 | Veena | .1
(5 rows)
7. Find the student having maximum marks in the subjects taught by “Mr. Kumar
select sname ,marks
from student a,teacher b, ‘student_teacher c
where marks = ( select max (marks )
 from student a,teacher b, student_teacher ¢
 where tname='Kumar'
[nee and a.sno=c.sno
| and b.tno=c.tno)
and a.sno=c.sno
and b.tno=c.tno;
= Aaa
 

| patabase Management Systems-II (BCA Science — TD) Assignments

execution of Query:
postgres=# \i a4.sql

:
|
output:
j

 

 

 

 

sname | marks
pene en nen ne nn ennnees Hf nee nee n nnn nee
Archana | 80
(1 row)
Views :

4, Create a view containing details of all the teachers teaching the subject
‘Mathematics’.

create view ass1 as
select distinct b.tname,b.experience
from teacher b,student_teacher c 
where subject='c' and b.tno=c.tno;
Execution of View:
postgres=# \i a4.sql’
CREATE VIEW .
postgres=# select * from ass1;
Output: .
Kumar } 10
2. Create a view to list the details of all the students who are taught by teacher 
having 
experience of more than 3 years.
=>create view ass2 as 
select a.sname,a.sclass from student a,teacher b,student_teacher c where
a.sno=c.sno and b.tno=c.tno 
group by sname,sclass,b.experience 
having b.experience > 3;
Postgres=# select * from ass3;
Output:
sname | sclass
amie es, Fete te sweeten
Amar | sybca
Amol | -fybca
Archana |  fybca
Kiran |  sybca
Suresh | — tybca
(5 rows)

3. Write the following Queries, on the above created views :
(a) List the name of the most experienced teacher for “Mathematics”.
select max(experience)
from assi;
=>10
(b) List the names of students of ‘ S.Y.B.C.A.’ class, who are taught by a teacher having
more than 3 years experience.
select sname from ass3
where sclass = 'sybca';
Execution of View:
postgres=# \i v4.sql
Output:
sname

Stored Functions: **********************
1. Write a function to accept teacher name as input and returns the number of students
taught by the teacher
create or replace function tech_cnt(name text) returns int as '
declare
cnt integer;
begin
select into cnt count(*)
from student a, teacher b, student_teacher c
where tname= name
and a.sno=c.sno
and b.tno=c.tno;
return cnt;
end;
'LANGUAGE 'plpgsql';
Execution of Code:
CREATE FUNCTION
postgres=# select tech_cnt('Kumar');
tech_cnt
3
(1row)
postgres=# select tech_cnt( ‘Veena’ );
Output:
tech_cnt
(1 row)
2. Write a function to accept name of subject and count the number of teachers who
teach that subject.
create or replace function sub_cnt(name text) returns int as ‘
declare
no integer ;
cnt integer;
begin
Select into cnt distinct count(tno)
from student_teacher
Where subject= name
Broup by tno;
return cnt;
end;
‘LANGUAGE 'plpgsql';

postgres=# select sub_cnt('DS');
Output:
sub_cnt
postgres=# select sub_cnt(‘c ys
Output:
sub_cnt
3.. Write a function to accept student name and calculate the total marks obtained by
that student.
create or replace function ee text) returns int. as ‘
declare
cnt integer;
begin
select into cnt sum(marks)
from student a , teacher b, student_teacher c 
where sname= name ; 
and a.sno=c.sno :
and b.tno=c.tno 
group by c.sno; 
return cnt; 
end;
'LANGUAGE 'plpgsql';
Output:
postgres=# select sub_sum('Suresh');
sub_sum
cursors:****************************************************************
bi. Writea stored function using cursors to accept student name from the user and find
the names of all teachers and subjects taught to the student.
create or replace function tech _name(name text) returns int as '
declare
cl cursor for select tname , subject
from student a , teacher b, student_teacher c
where sname= name
and a.sno=c.sno
and b.tno=c.tno;
name1 text;
sub text;
begin
open cl;
loop
fetch cl into name1, sub;
EXIT WHEN NOT FOUND;
raise notice ''% %'‘*,name1,sub;
end loop;
close ci;
return 1;
end;
'LANGUAGE 'plpgsql';
postgres=# select tech_name('Suresh');
eae
NOTICE: Kumar Cc
NOTICE: - Ketaki ADBMS
tech_name
1
(1 row)
2. Write a stored function using cursors which will calculate total number of subjects
taught by each teacher.
create or replace function tech_ cnt() returns int as'
declare
c2 cursor select distinct subject, tname,count(distinct(b.tno))
from teacher a, student_teacher b
Where a.tno=b.tno
group by subject, tname;
name1 text;
sub1 text;
cnt integer;
begin
open c2;
loop
fetch c2 into name1, cnt;
EXIT WHEN NOT FOUND;
raise notice ''% % '',name1,cnt;
end loop;
close c2;
return 1;
end;
'LANGUAGE 'plpgsql';
Errors and Exceptions:**************************************************************
1. Write a stored function to accept teacher name as input parameter and print the total
number of students taught by the teacher. In case the teacher name is invalid, raise
an exception for the same. :
create or replace function tech_cnt(name text) returns int as '
declare
cnt integer;
begin
select into cnt count(*) 
from student a, teacher b, student_teacher c
where tname= name
and a.sno=c.sno
and b.tno=c.tno;
if cnt=0 then
raise exception '' Invalid teacher '';
end if;
return cnt;
end;
'LANGUAGE 'plpgsql';
postgres=# select tech_cnt( ‘Kumar’ )
Output:
| | tech_cnt
     3
postgres=# select tech_cnt('Kk');
output :
ERROR: Invalid teacher
Write a stored function to increase the marks of each student to 40 if the marks are
between 35 and 40. Print a notice to the user, before updating the marks.
create or replace function upd_mk() returns int as '
declare
c2 cursor for select sno, marks from student_teacher where marks between
35 and 40; .
rno integer;
mks integer;
begin 
open c2; 
loop
fetch c2 into rno,mks;
EXIT WHEN NOT FOUND;
update student_teacher
set marks=40 where sno=rno; 
raise notice ''% marks are updated '',rno;
end loop;
close c2;
return 1;
end;
'LANGUAGE 'plpgsql';
postgres=# insert into student_teacher values(1,1,‘c',35);3
INSERT @ 1
' postgres=# insert into student_teacher values(1,2, 'DS',38);
INSERT @ 1
Xecution of Code:
Postgres=# \i cur1.sql
CREATE FUNCTION
Postgres=# select upd_mk();
NOTICE: 1 marks are updated ~
NOTICE: 1 marks are updated
upd_mk

Triggers:****************************************************************************
1. Write a trigger before deleting'a student record from the student table. Raise @
and display the message “student record is being deleted”.
CREATE TRIGGER del_student
BEFORE DELETE ON student
FOR EACH ROW
EXECUTE PROCEDURE print_notice_stud();
create or replace Function print_notice_stud() returns 5 trigger as '
declare
begin
RAISE NOTICE ''deleting Student data ..'';
return null;
end;
'LANGUAGE 'plpgsql';
CREATE FUNCTION
CREATE TRIGGER
9, Write a trigger to ensure that the marks entered for a student, with respect to a
subject is never < 0 and greater than 100,
create or replace function chk_stud() returns trigger as '
declare
mk integer;
begin
if NEW.marks < © or NEW.marks > 100 then
raise notice ''Marks should be never < 0 or Marks should be never > 100'';
end if;
return null;
end;
'LANGUAGE 'plpgsql';
CREATE TRIGGER chk_marks
BEFORE INSERT ON student_teacher
FOR EACH ROW
EXECUTE PROCEDURE chk_stud();
postgres=# \i c5.sql
CREATE FUNCTION
postgres=# \i trg1.sql
CREATE TRIGGER
Output:
postgrese=# insert into student_teacher values(1,3, 'ADBMS' ,105);
NOTICE: Marks should be never < @ or Marks should be never > 100
postgressi#t insert into student_teacher values(1,3, "ADBMS',105) ;
NOTICE: Marks should be never < @ on Marks should be never > 100
Movie DATABASE$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Consider the following Movie database.
Movies (mno integer, mname varchar (25),release_year integer, budget money)
actor (ano integer, a_name char (30),role char (30), charges money, a_address varchar(30))
Producer(pno integer,name char (30), p_address varchar (30))

Each actor has acted in one or more movies. Each
movies and each movie can be produced by more than
one one producers,or more actors acting in it, in different roles.
Create the above database in PostGreSQL.
create table movies
( 
mno integer primary key,
mname char(30),
release_year integer ,
budget money
);
create table actor
(
ano integer primary key,
a_name char(30),
role char(15),
a_address char(30),
charges money
);
create table producer
(
pno integer primary key,
pname char(30),
p_address char(30)
);
create table mov_act_pro
(
mno integer references movies(mno),
ano integer references actor(ano),
pno integer references producer(pno)
);
insert into movies values(1, 'PK',2015,1000000) ;
insert into movies values(2, 'piku' ,2014, 2000000) ;
insert into movies values(3, 'Bajirao mastani' , 2016, 30000000);
insert into movies values(4, 'Dangal' , 2016, 50000000); 
insert into movies values(5, ‘Student of Year', 2015, 25000000) ;

 

insert into actor values(1, 'Amitabh', 'Hero', 'Mumbai' , 100000000);
insert into actor values(2, 'Amin' , 'Hero' ,'DeLhi' ,200000000);
insert into actor values(3, 'Deepika', 'Heroine','Pune',10000000);
insert into actor values(4, 'Anushka', 'Heroine', 'Chennai',5000000);
insert into actor values(5, 'Aliya', 'Heroine' , 'Delhi' , 6000000);
insert into actor values(6, 'Varun', 'Villan' ,'Pune' , 30000000);
 


insert into producer values(l,'Karan', 'Mumbad');
insert into producer values (2, 'Shetty', 'Pune');
insort into producer values(3,'Khan', 'Mumbai');
insert into producer values(4,'Salman','Mumbai');
insert into producer values(5, 'Amir', 'Delhi');

insert into mov_act_pro values(2,1,1);
insert into mov_act_pro values(2,3,2);
insert into mov_act pro values(1,2,5);
insert: into mov_act_pro values(1,4,5);
insert into mov_act_pro values(3,3,4);
insert into mov_act_pro values(3,5,4);
insert into mov_act_pro values(4,6,3);
insert into mov_act_pro values(4,4,5);
Execution of Query: .
postgresett select * from movies;
Output:
postgres select * from actor;
Outputs
select * from producen;
postgres=# select * from mov_act_pro;
Output:

1. List the names of actors who have acted in at least one movie, in which mr.Amir has
acted.
select a_name, mname from movies a,actor b ,mov_act_pro c
where c.mno = (select c.mno from movies a,actor b,mov_act_pro c
where a_name='Amir'
and a.mno=c.mno
and b.ano=c.ano)
and a.mno=c.mno
and b.ano=c.ano
group by a_name,mname 
having count(*)>= 1;
output:
a_name | mname
Anushka | PK
 Amir | . PK

2, List the names of the actors and their movie names.

select a_name, mname from movies a,actor b , mov_act_pro c
where a.mno=c.mno ,
and b.ano=c.ano;

3. List the names of movies whose producer is “Mr. Khan”

select pname, mname from movies a,producer c,mov_ act _pro d
Where pname='Khan'
and a.mno=d.mno
and c.pno=d.pno;
Output:

4 list the names of the movies with the highest budget.
Select mname , budget
from movies where budget =(select max(budget) from movies) ;
Output:
mname | budget
Dangal | $50,000,000.00
5. List the names of movies released after 2000.
select mname , release_year
from movies where release_year > 2000 ;
Output:
mname 7 | release_year
PK | 2015
Piku | 2014
Bajirao mastani | 2016
Dangal | - 2016
Student ofthe Year | 2015
6. List the names of actors who played the role of ‘Villan’.
select a_name , role
from actor
where role = 'Villan' ;
Execution of Query:
Output:
a_name | role
Varun | Villan

7. List the names of actors who are given the maximum charges for their movies along
with movie name and release year,
select a_name , mname , release_year, charges 
from movies a, actor b, mov_act_pro c
where charges = (select max(charges) from actor )
and a.mno=c.mno
and b.ano=c.ano;

8. Display count and total budget of all movies released in year 2015.
select count(mno), sum(budget) 
from movies
where release_year = 2015 ; '

Cursor and Triggers:***********************************************************************
i Write a trigger before inserting into a movie table to check budget.Budget should be
minimum 50 lakh. Display appropriate message.
create or replace function chk_budget() returns trigger a '
declare
begin
if cast(NEW.budget as numeric) < 50000 then
raise notice ''Budget should be never < 50000 '';
end if;
return null;
end;
'LANGUAGE 'plpgsql';
CREATE TRIGGER Trg_budget1
BEFORE INSERT ON movies
FOR EACH ROW
EXECUTE PROCEDURE chk_budget();
Execution of Code:
postgrese® \L ass. sql
CREATE FUNCTION
postgrese® \L tre2.sql
CREATE TRIGGER
Output:
postgreset insert into movies values(6, ‘Dhoom 3', 2013, 2000) ;
NOTICE: Budget should be never <¢ 50000
INSERT @ 6

2. Write a stored function using cursors to display the names of actors who have acted
in the maximum number of movies. ,
create or replace function print_act() returns int as '
declare
c2 cursor for select a_name , count(b.mno)
from actor a, mov_act_pro b where a.ano=b.ano
group by a_name order by count(b.mno) desc Limit 1;
name char(30);
cnt integer;
begin
open c2;
loop
fetch c2 into name,cnt;
EXIT WHEN NOT FOUND;
raise notice ''% %"',name, cnt ;
end loop;
close c2;
return 1;
end;
'LANGUAGE 'plpgsql';
Execution of Code:
postgres=# \i cur3.sql
CREATE FUNCTION
postgres=# select print_act();
NOTICE: Deepika 3
Output:
print_act
Stored Functions:**************************************************************************
1. Write a function to list moviewise charges of ‘amitabh Bachchan’,
create or replace function print_ chrge(act_nm text) returns int as '
declare
rec record;
begin
for rec in select mname, charges
from movies a , actor b, mov_act_pro c
where a_name= act_nm and a.mno=c.mno and b.ano=c.ano
loop
raise notice ''% %'',rec.mname,rec. charges;
end loop;
return 1;
end;
'LANGUAGE 'plpgsql';
xecution of Code:
postgres=# \i try4.sql
CREATE FUNCTION
gepsteres=# select print_ chrge(‘ Amitabh’ )3
Output:
NOTICE: piku $100,000, 000.00
print_chrge
1
(1 row)

2. Write a stored function to accept producer name as input and print the names of ;
movies produced by him/her. Also print the total number of actors in that movie,

create or replace function print_prod(act_nm text) returns int as '
declare
rec record;
rec1 record;
begin
for rec in select distinct c.mno, mname ,pname
from movies a , mov_act_pro c , producer d
where pname= act_nm and c.pno=d.pno and a.mno=c.mno
loop 
for rec1 in select count (*) as cnt from mov_act_pro where mno=rec.mno
loop
raise notice ''% %'' ,rec.mname,rec1.cnt;
end loop; 
end loop;
return 1;
end;
'LANGUAGE 'plpgsq1';
Execution of Code:
- postgres=# \i t4.sql
CREATE FUNCTION
postgres=# select print_prod('Amir'); -
- Output:
NOTICE: PK 2
NOTICE: Dangal 3
print_prod
3. Write a stored function to accept movie name as input and print the names of actors
working in the movie.
create or replace*function print_name(mov_nm text) returns int as '
declare
rec record;
begin
for rec in select a_name
from movies a , actor b, mov_act_pro c
where mname= mov_nm and b.ano=c.ano and a.mno=c.mno
loop
raise notice ''% '',rec.a_name;
end loop;
return 1;
end;
'LANGUAGE ‘plpgsql';
Execution of Code:
postgres=# \i t4.sql
CREATE FUNCTION
postgres=# select print_name( 'Dangal');
Output: .
NOTICE: Varun
NOTICE: Anushka
NOTICE: Deepika
print_name
1
Views:***********************************************************************************
1 List the names of producers who produce the same movie as ‘Karan Johar’ has
produced.
create view V1 as
select distinct pname
from movies a, mov_act_pro c,producer d
where c.mno( select distinct c.mno from movies a ,
mov_act_pro c,
producer d
where pname= 'Karan' and c.pno=d.pno and a.mno=c.mno)
and c.pno=d.pno;
Execution of View:
Postgrese# \i v1.sql
CREATE VIEW
Postgrese# select * from v1;

2.List
the names of actors who do not live in
mumbai pune city
create view V2 as
select a_name
from actor
Where a_address not in ('Mumbai', 'Pune');

Execution of View:
postgres=# \i v1.sql
CREATE VIEW
postgres=# select * from v2;
Output:
3. List the actors in each movie.
create view V3 as
select mname, a_name
from movies a ,actor b, mov_act_pro c
where b.ano=c.ano and a.mno=c.mno group by mname,a_name 
order by mname, a_name;
Execution of Code:
postgres=# \i vi.sql
REATE VIEW
=# select * from v3;
Output:.
mname | a_name
Bajirao mastani | Aliya.
Bajirao mastani | Deepika
Dangal | Anushka
ngal | Deepika
Dangal | Varun
Piku | Amitabh
Piku | Deepika
PK | Amir
|__?K | Anushka
(9 rows)
Exceptions:**********************************************************************************
4, Write a stored function to accept movie name as input and print the names of actors
working in the movie. Also print the total number of actors working in that
movie. Raise an exception for an invalid movie name.
create or replace function print_name1(movnm text) returns int as '
declare
rec record;
total integer:=0;
begin
select into total count(*)
from movies a, actor b, mov_act_pro c
where mname= mov_nm
and b.ano=c.ano
and a.mno=c.mno
group by a_name;
IF NOT FOUND THEN
raise exception 
''Movie % not found'', mov_nm;
END IF;
total:=0;
for rec in select a_name ,count(*) as cnt
from movies a,actor b, mov_act_pro c
where mname= mov_nm and b.ano=c.ano and a.mno=c.mno
group by a_name
loop
raise notice ''% %'' pec.a_name,rec.cnt;
total :=total + rec.cnt;
end loop;
raise notice ''Total actors=%'', total;
return 1;
end;
'LANGUAGE 'plpgsql';
CREATE FUNCTION
postgres=# select print_name1('k11');
utput:
ERROR:
Movie kll not found
postgres=# select print_namel('Dangal');
NOTICE:
NOTICE:
NOTICE:
NOTICE:

Deepika 1
Varun 1
Anushka 1

Total actors=3

rint_namel
(1 row)

2. Write a stored function to accept producer name as input and print the names of
Movies produced by him/her..Also print the total number of actors in that movie.
Raise an exception for an invalid produce
create or replace function print_prodi(act_nm text) returns int as '
declare
rec record;
reci record;
total integer :=0;
begin
select into total distinct c.mno
from movies a, mov_act_pro c , producer d
where pname= act_nm
and c.pno=d.pno and a.mno=c.mno;
IF NOT FOUND THEN
raise exception ''tnvalid Producer Name'';
END IF;
total:=0;
for rec in select distinct c.mno,mname ,pname
from movies a , producer d
mov_act_pro c
where pname= act_nm
and c.pno=d.pno and 
a.mno=c.mno
loop
for rc1 select count(*) as cnt from mov_act_pro where mno=rec.mno
loop
raise notice ''% %'',rec.mname,reci.cnt;
end loop;
end loop;
return 1;
end;
'LANGUAGE 'plpgsql';
cution of Code:
postgres=# \i t5.sql
CREATE FUNCTION
postgres=# select print_prodi(‘gg');
tput:
ERROR: Invalid Producer Name
postgres=# select print_prod1( ‘Amir’ );
NOTICE: Dangal 3 .
NOTICE: PK 2
print_prodi
1
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Consider the following Student-Marks database:
Student(rollno integer, name varchar(30), address varchar
Subject(scode varchar(10), subject name yvarchar(20))
Student-Subject are related with M-M relationship with a ibutes marks_scored.
Create the above database in PostGreSQL.
Create table student
(
  sno integer primary key,
  sname char(30),
  sclass char(10),
  saddr char(50)
);
create table subject (
scode varchar(10) primary key,
sub_name varchar(30)
);
create table stud_sub
(
sno integer references student(sno),
scode varchar(10) references subject(scode),
marks integer
);
insert into student values(1, 'Amol', 'fybca', 'pune' );
insert into student values (2, 'Archana', 'fybca', 'pune');
insert into student values (3, 'kiran', 'sybca', 'pune' );
insert into student values(4, 'Omkar','sybca', 'pune');
insert into student values(5, 'Suresh', 'tybca','pune');
insert into student values(6, 'Reena', 'tybca', 'Mumbai' );


insert into subject values ('BCA-301', 'DS');
insert into subject values('BCA-302', 'ARDBMS' );
insert into subject values('BCA-303','SE');
insert into subject values('BCA-304','CN');
insert into subject values('BCA-305','LAB-I');
insert into subject values('BCA-306', 'LAB-II');
insert into subject values('BCA-101','C');
insert into subject values('BCA-501', 'JAVA');

insert into stud_sub values(3, 'BCA-301' ,60);
insert into stud_sub values (3, 'BCA-302' ,80);
insert into stud_sub values (3, 'BCA-303',50);
insert into stud_sub values (3, 'BCA-304' ,70);
insert into stud_sub values (3, 'BCA-305' ,86);
insert into stud_sub values (3, 'BCA-306',76);
insert into stud_sub values (4, 'BCA-301' ,60);
insert into stud_sub values (4, 'BCA-3@2' ,40);
insert into stud_sub values (4, 'BCA-303' ,50);
insert into stud_sub values (4, 'BCA-304' ,70);
insert into stud_sub values (4, 'BCA-305",46);
insert into stud_sub values (4, 'BCA-306',56);
insert into stud_sub values(1, 'BCA-101' ,60);
insert into stud_sub values(2, 'BCA-101' , 80) ;
insert into stud_sub values(5, 'BCA-5@1' ,70);
insert into stud_sub values(6, 'BCA-501' ,80);

postgres=# select * from student;
utput:
sno | sname | sclass | saddr
ercenee Fp rermrerceeemmnne ob monn nnn enneme fy mann ence mene
1 | Amol | fybca =| Pune
2 | Archana | fybca | Pune
3 | Kiran | sybca | Pune
4 | Amar | sybca | Pune
5 | Suresh | tybca | Pune
6 | Reena | tybca | Mumbai
(6 rows)
Execution of Query:
postgres=# select * from subject;
Output:
scode | sub_name
ae + ---------------------
BCA-301 | Ds
BCA-302 | ARDBMS
BCA-303 | SE.
BCA-304 | CN
BCA-305 | LAB-I
BCA-306 | LAB-II —
BCA-101 } Cc
BCA-501 | JAVA _
(8 rows)
Execution of Query:
postgres=# select * from stud_sub;
Output:
sno | scode | marks
haneee fp necnceeeneneceee of ceceneceenneenes
3 | BCA-301 | 60
3 | BCA-302 | 80
3 | BCA-303° | 50
3. | BCA-304 | 70
3 |BCA-305 | 86
3 | BCA-306 | 76
4 |BCA-301 | 60
4 |BCA-302 | 40
4 | BCA-303 . | 50
4 |BCA-304 | 70
4 | BCA-305 | 46
4 | BCA-306 | 56
4 |.BCA-306 | 56 a
1 | BCA-101 | 60
2 | BCA-101 | 80
5 | BCA-501 | 70
6 | BCA-501 | 80
(16 rows)
Execute the Following Queries:
1. Display the names of students scoring the maximum total marks,
select sname ,sum(marks)
from student a, subject b,stud_sub c
where a.sno=c.sno
and b.scode=c.scode
group by sname
order by sum(marks) desc 
limit 1; 
Execution of Query:
postgres=# \i a4.sql
- Output:
sname = | sum
+--
Kiran | 422
(Lrow) .
2. List the distinct names of all the subjects.
Execution of Query: aa
postgres=# select * from subject;
Output:
scode | sub_name >
BCA-301 | Ds .
BCA-302 | ARDBMS
BCA-303 | SE
BCA-304 | CN
—BCA-305 |  LAB-I
BCA-306 | LAB-II
BCA-101 j-¢€
BCA-501 | JAVA

| 3. Display class wise Ssubject wise student list.
 select sclass, sname from student
 group by sclass, sname
 order by sclass, sname;
bE postgres=# \i a4.sql
| Output: ,
sclass | sname
E | * i
Fe fybca | Amol
L fybca | Archana -
E sybca | Amar
F sybca | Kiran
tybca _ | Reena
tybca | Suresh
(6 rows) |

select sclass,sub_name,sname
from student a,subject b,stud_sub c.
where a.sno=c.sno
and b.scode=c.scode
L group by sclass,sub_name, sname
b order by sclass,sub_name, sname;
tion of Query:
Ee postgres=# \i a4.sql
Cutput:
sclass | sub_mame | sname
—--- + - nan HH --
fybca } Cc | Amol
fybca | Cc | Archana
sybca | ARDBMS | Amar
sybca | ARDBMS | Kiran
sybca | CN | Amar
sybca [| CN | Kiran
sybca | Ds | Amar
sybca | | Ds | Kiran
| sybca | LAB-I | Amar
_Lsybea | LAB | _Kiran
sybca | LAB-II | Amar
sybca | LAB-II | Kiran
sybca | SE | Amar
sybca | SE | Kiran
tybca | JAVA | Reena
tybca | JAVA | Suresh
(16 rows) ;
Cursor and Triggers: ***********************************************************************************
1. Write a stored function using cursors, to accept a address from the user and dj
the name, subject and the marks of the students staying at that address, “Day
create or replace function print_mk(adr text) returns int as '
declare .
c2 cursor for select sname,sub_name, marks
from student a,subject b,stud_sub c
where saddr=adr
and a.sno=c.sno
and b.scode=c.scode ;
name varchar(3@);
sname varchar(3@) ;
mks integer;
begin
open c2;
loop
fetch c2 into name, sname,mks;
EXIT WHEN NOT FOUND; .
raise notice ''% % % '',name,sname,mks;
end loop;
close c2;
return 1;
~ end;
"LANGUAGE 'plpgsql' ;
Execution of Code:
postgres=# \i cur1.sql
CREATE FUNCTION

postgres=# select print_mk('pune');
Output:
NOTICE: Amol C. 60
NOTICE: Archana | Cc. 80
“NOTICE: kiran ~ DS 60
NOTICE: kiran ARDBMS_ 8@
NOTICE: kiran SE 56
NOTICE: kiran CN 728
NOTICE: kiran LAB-I 86
NOTICE: kiran LAB-II 76
NOTICE: Amar DS 60
NOTICE: Amar ARDBMS 4@
NOTICE: Amar : SE 58
NOTICE: Amar CN 7@.
NOTICE: Amar LAB-I 46
NOTICE: Amar LAB-II 56
NOTICE: Suresh JAVA 70
print_mk
1
(1row)
Execution of Code:
postgres=# select print_mk( ‘Mumbai ');
NOTICE: Reena JAVA 80
Output:
print_mk
1
(1 row) : 1y
2. Write a stored function using cursors which will calculate total marks of each
student.
create or replace function print_perc() returns int as *-
declare
c2 cursor for select sclass,sname, sum(marks)
from student a,subject b,stud_sub c
Where a.sno=c.sno
and b.scode=c.scode
_ Broup by sclass, sname.
Order by sclass,sname ;
Name varchar(3@); _
Class varchar(30);
mks integer;
begin
Open c2;
raise notice ''Class Name Total Marks'';
Ot at me mo me oe wr,
raise notice | nnn nnn n nnn enn enna ’
loop
fetch c2 into class,name,mks;
EXIT WHEN NOT FOUND;
raise notice ''% % % '',class,name,mks;
end loop;
close c2;
return 1;
end;
"LANGUAGE 'plpgsql';
Execution of Code:
postgres=# \i cur4.sql
CREATE FUNCTION
postgres=# select print_perc();
Output:
NOTICE: Class Name Total Marks
NOTICE: ----------------- nee ielelalaleloletelaleleotel
NOTICE: fybca Amol 60
NOTICE: fybca Archana 80
NOTICE: sybca Amar 322
NOTICE: sybca kiran 422
NOTICE: tybca Reena ‘80
NOTICE: tybca Suresh 70
print_perc
1
(1 row)
Write a trigger before deleting a student record from the student table. Rast *
notice.and display the message '
“student record is being deleted”,
create or replace function p
rint_notice.stud() returns trigger as '
declare
begin
RAISE NOTICE ""deletin
return null;
' end;
" LANGUAGE ‘plpgsql';
CREATE TRIGGER del_student2
BEFORE DELETE ON student
FOR EACH ROW
EXECUTE PROCEDURE print_notice_stud();
g Student data mt
we
Lae
A.44
pase Management Systems-Il (BCA Science — II) Assignments
ecution of Code:
ostgres=# \i tr.sql
CREATE FUNCTION
“aEATE TRIGGER
postgres=# delete from student where sno=6;
ut:
NOTICE:
DELETE 9
postgr es=#
Write a trigger to ensure that the marks entered for a student, with respect to a
subject is never < 0 and greater than 100.
create or replace function chk_stud1() returns trigger as '
deleting Student data ..
declare
begin
if NEW.marks < @ or NEW.marks > 100 then -
raise notice ''Marks should be never < @ or Marks should be | never > 168°’;
end if;
return null;
end;
‘LANGUAGE ‘plpgsql’;
CREATE TRIGGER TRG_marks.
BEFORE INSERT ON stud_sub -
FOR EACH ROW
EXECUTE PROCEDURE chk_stud1();
Execution of Code:
postgres=# \i trg4.sql
CREATE FUNCTION
CREATE TRIGGER
postgres=# insert into stud_sub values(3s" BCA-101' ,15@);
futput:
NOTICE:
INSERT 8 @
Ostgres=#
iews;
To list student name, class §total marks scored by each student sorted by student
Name,
create view v4 as
Select sname ,sclass,sum(marks)
From Student a,subject b,stud_sub ¢
Where a.sno=c.sno -
and b, Scode=c.scode
a by sname,sclass
Srder by sname, sclass

Marks should be never < @ or Marks should be never > 100
Assigning
Execution of View: ats
postgres=# \i a4.sql
CREATE VIEW
postgres=# select * from v4;

Output:
sname | sclass | sum
meee een eee ee a meee ene n of nn 2+ oe
Amar | sybca | 322
Amol | fybca | 60
Archana | fybca | 80
Kiran | sybca | 422
Reen | tybca | 80
Suresh | tybca | 70
(6 rows)
- 2. To list student names along with subject name and markswho s
60 marks. Cored move tha
create view v5 as —
select sname ,sub_name, marks
from student a,subject b,stud_sub c
where a.sno=c.sno

and b.scode=c.scode
and marks > 60
order by sname,sclass-

Execution of View: _ | |
postgres=# \i a4.sql att |
CREATE VIEW | , . | |
postgres=# select * from v5;- )

Output: : 3 | |

sname | sub_name | sum
weeeeen nen nnnnn= op cecnnennrenenn op ceccerccenn
Amar | CN | 70
Archana | C | 80
- Kiran | LAB-I | 86
Kiran | LAB-II | 76
Kiran | ARDBMS | 80°
Kiran | CN | 70. | . 4
“Reen | JAVA | 80 .. abt a
Suresh | JAVA | 70 /
_ (8 rows)
patabase Management Systems-Il (BCA Science — Il) Assignments
Datadbas’-

3, Containing all the details of student named ‘Amar’,
| create view v8 as
select sname ,sclass,saddr,sub_name,marks
from student a,subject b,stud_sub c
where Sname='Amar'
and a.Sno=c.sno
and b.scode=c.scode ;
Execution of View:
postgres=# \i a4.sql
CREATE VIEW
postgres=# select * from v8;
Output:
sname | sclass | saddr | sub-name | marks
+ th mene en nn enna ne + --=- +
Amar | sybca | pune | Ds ~ | 60
Amar | sybca | pune | ARDBMS | 40
Amar |_ sybca | pune | SE. | 50
Amar | sybca | pune | CN | 70
Amar | sybca |. pune |  LAB-I | 46
Amar | sybca | pune | LAB-IT | 56
(6 rows)
* Consider the following Bus transport Database$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$.
bus (bus_no integer , Capacity integer , depot_name varchar(20), route_no integer)
Toute (route_no integer, source char(20), destination char(20), No_of_stations integer)
driver (driver no integer, driver_name char(20), license_no integer, address Char(20)
+ 28e integer, salary float) |
"s_route : M-1 and Bus_Driver : M-M with descriptive attribu
and shift can be1 (Morning)or 2 ( Evening), r Pees aa ee
Constraints:1.License_no is unique. 2, Bus capacity is not null.
Create the above database in PostGreSQL.
Create table route(
route _no integer primary key,
src varchar(30),
dest varchar(30),

no_of_station integer
);
create table bus(
bus_no integer primary key,
capacity integer not null,
depot_name char(36),
route_no integer references route (route_no)
);
create table driver
(
dno integer primary key,
dname varchar(30),
lic_no integer unique ,
address varchar(30),
age integer ,
salary float
);
create table bus_driver
(
bus_no integer references bus(bus_no),
dno integer references driver(dno),
date_of_duty date,
shift integer CHECK(shift in (1 ,2))
);
insert into route values(1,'Hadapsar','Katraj', 20);
insert into route values(2,'Hadapsar','Kothrud', 25); .
insert into route values(3, 'Hadapsar','Chinchwad', 30);
insert into route values(4, 'Nigadi','Hadapsar', 30);
insert into route values(5, 'Kothrud', 'Katraj', 22);

 

insert into bus values(101,35, 'Hadapsar',1);
insert into bus values(102,20, 'Hadapsar' ,2);
insert into bus values (103,32, 'Hadapsar' ,3);
insert into bus values(104,25, 'Nigadi',4);
insert into bus values(105,5, 'Kothrud',5);
insert into bus values(106,25, 'Kothrud',5);
insert into bus values(107,35, 'Hadapsar' ,3);

insert into driver values(1,'Amol', 1001, 'Pune',55,15000);
insert into driver values(2, 'Ashok', 2001, 'Karad' ,45,12000);
insert into driver values(3,'Bhushan', 3001, 'Pune' ,35,10000);
insert into driver values(4,'Kiran', 4001, 'Satara' ,25,8000);
insert into driver values(5,'Ram', 5001,'Pune',32,9000); 

insert into bus_driver values(101,1, '2014-04-20' ,1);
insert into bus_driver values (102,2, '2014-04-20' ,2);
insert into bus_driver values (103,3,'2015-04-20' ,1);
insert into bus_driver values(104,4, '2016-04-20',2);
insert into bus_driver values (105,5,'2017-04-20',1);
insert into bus_driver values(106,3, '2015-04-20',2);
insert into bus_driver values(107,4,'2016-04-20',1);
execution of Query:
postgres=# select * from route;
Output:
route_no | src | dest | no_of_station
weno een Hh rrr rms t ee ob creme ene hl ene meen ne eee
1 | Hadapsar_ |. Katraj | 20
2 | Hadapsar | Kothrud | 25
3 | Hadapsar- | Chinchwad | 30.
4 | Nigadi | Hadapsar | 30
5 | Kothrud | Katraj | 22
(5 rows)
Execution of Query:
postgres=# select * from. bus;
Output:
bus_no | src | dest | route_no
eee ne ---- + ween nnn een + bee aac fp cree een nnn
101 =| 352 | Hadapsar } 1
102. || 20 | Hadapsar | 2
103s || 32 | Hadapsar | 3
104 | 25 | Nigadi | 4
105 | 5 | Kothrud - | 5
106 =| 25 | Kothrud | 5
107. | 35 | Hadapsar | 3
(7 rows)
Execution of Query:
Postgres=#
postgres=# select * from driver;
Output; :
dno | dname | licno | address | age | salary
a ap cee ee ene en en pe een ener ee iseecceeses off Sesnsesesenes
| Amol | 1001 | Pune | 55 | 15000
_| Archana | 2001 | Pune | 45 | 12000
| Kiran | 3001 | Pune | 35 | 10000
| Amar | 4001 | Pune | 25 | 8000.
| Suresh | 5001 | Pune | 32 | 9000
(5 rows)
| AAD
postgres=# select * from bus_driver;
Output:
| bus_no | dno | date_of_duty | shift
+ sh reece ee nc nc nneneene } meeonenpeeneee
| 01 | 1 | 2014-04-20 | 1
| 102 | 2 | 2014-04-20 | 2
| 403 | 3 | 2015-04-20 | 1
| 2104 | 4 | 2016-04-20 | 2
| ws | 5 | 2017-04-20 | 1

106 «| 8 | 2015-04-20 | 2

407 «=| 4 | 2016-04-20 | 1

| (7 rows)

| Execute the Following Queries:

 1.Find out the name of the driver having maximum salary,
 select dname, salary
from driver wnere salary = (select max(salary) from driver );
Execution of Query:
postgres=# \i as51.sql
Output:
| dname | salary
enn nnn ne -—-
Amol | 15000
(i row)
2. Delete the record of bus having capacity< 10
postgres=# delete from bus where Capacity < 10;
3. Increase the salary of all drivers by5% if driver's age> 45,
update driver
set salary = salaryt+salary * 0.05
where age > 45;
Execution of Query:
postgres=# \i as51.sql
UPDATE 1
postgres=# select * from driver;
output
dno | dmame | licno | address | age | salary
2 | Ashok | 2001 | Karad | 45 | 12000
3 | Bhushan | 3001 | Pune | 35 | 10000
4 | Kiran | 4001 | Satara | 25 | 8000
5 | Ram | 5001 | Pune | 32 | 9000
1 | Amol | 1001 | Pune | 55 | 15750
(5 rows) .
4. Find out the route details on which buses of capacity 20 run.
select a.route_no , src, dest , capacity from route a, bus b
where b.capacity=20 and a.route_no = b.route_no; 
Execution of Query:
postgres=# \i as51.sql
Output:
route_no | src . | dest . | capacity
+ +- mencee fe ceceeee | Joe
2 | Hadapsar_ | Kothrud | 20
(1 row)

5. Print the names and license nos. of drivers working on in both shifts.
select dname,lic_no from driver a, bus_driver b
where b.shift = 1 and a.dno = b.dno
intersect
select dname,lic_no from driver a,bus_driver b
where b.shift = 2 and a.dno = b.dno;
Execution of Query: |
Postgres=# \i as51.sql
Output:
~ Cursor and Trigger:*****************************************************************************************************
1. Define a trigger after insert or update the record of driver if the age is between 18 ang
50 give the message “valid entry” otherwise give appropriate message.
create or replace function chk_age() returns trigger as '
declare
begin
if NEW.age > 18 and NEW.age < 50 then
raise notice ''Valid Entry''; .
else
raise exception '' Age is not appropriate’ ' ;
end if; ,
return null;
‘end;
"LANGUAGE 'plpgsql';
CREATE TRIGGER TRG_marks1
AFTER INSERT or UPDATE ON driver
FOR EACH ROW :
EXECUTE PROCEDURE chk_age();
Execution of Code: |
postgres=# \i trg5.sql
CREATE FUNCTION
CREATE TRIGGER
Output: :
postgres=# insert into driver values(7,'Paul', 7001, ‘Pune’, 17,5000);
ERROR: Age is not appropriate
postgres=# select * from driver;
dno | dname | licno | address | age | salary
weoene dh corre reece meee of mee neeneennee fe cronemenennme dy momennmmae of maaan mme nme
4 |Amol -°| 1001 | Pune | 55 = | 15750
2 | Ashok | 2001 | Karad | 45 | 12000
3 | Bhushan | 3001 | Pune | 35 | 10000
4 | Kiran | 4001 | Satara | 25 | 8000
5 | Ram | 5001 | Pune | 32 | 9000
(5 rows)
 Define a trigger after delete the record of bus having capacity< 10. Display the
"message accordingly.
create or replace function print_notice_bus() returns trigger as '
declare
begin
if (old.capacity < 10) then
RAISE NOTICE '‘''deleting BUS NO % data havingcapacity < 10
.'',old.bus_no;
end if;
return null;
end;
"LANGUAGE 'plpgsql1';
CREATE TRIGGER del bus trg3
- AFTER DELETE ON bus ~
FOR EACH ROW
EXECUTE PROCEDURE print _ notice “bus()3
ixecution of Code:
postgres=# \i trg5.sql
CREATE FUNCTION
CREATE TRIGGER
). Write a stored function using cursors to display the details of a driver. (Accept driver
name as input parameter).
create or replace function print_driver(name text) returns int as
declare
c2 cursor for select dname,lic_no,age, salary
‘from driver where dname=name;
dname varchar(3@) ;
dlic integer;
dage integer;
-dsal float;
‘begin
open c23
loop
fetch c2 into dname,dlic,dage,dsal;
EXIT WHEN NOT FOUND; ,
raise notice ''%% % %'',dname,dlic,dage,dsal;
end loop;
Close ¢2;
return 13
end;
“LANGUAGE * Plpgsql'3
Execution of Code:
postgres=# \i curS.sql
CREATE FUNCTION
postgres=# select print_driver('Amol');
Output
NOTICE: Amol 1001 55 15750
print_driver
(1 row)
Stored Functions:*********************************************************************************************************
1. Write a stored function to print the names of drivers working on pol shifts on
‘20/04/2014’.
create or replace function print_dri_shift(dt date) returns int as '
declare
rec record;
begin
for rec in select dname
from driver a , bus_driver b where b. ‘date of vditye dt
and a.dno=b.dno and b.shift=1
intersect
select dname from driver a , bus_driver b
where b.date_of_duty=dt ‘and a.dno=b.dno and b. shift=2
loop
raise notice ''%'',rec.dname;
end loop;
return 1;
end;
"LANGUAGE 'plpgsql';
Execution of Code:
postgres=# insert into bus_driver values(106,1,'2@14-04-20' ,2);
INSERT @ 1
postgres=# \i curS.sql
CREATE FUNCTION
postgres=# select print_dri_shift('2014-@4-29');
output:
NOTICE: Amol
(row) ©
2. Write a stored function to display the details of a driver, (accept driver name as input.
parameter).
create or replace function print_ dri. _dtl(name text) returns int as '
declare
rec record;
begin
for rec in select dname,lic_no,age, salary
from driver where See =name
loop
raise notice ''%% % Bi 'rec. dname, rec.lic_no,rec.age,rec. salanys
wee
end loop; State
~peturn 1;
end;
"LANGUAGE '‘plpgsql';-
_ Execution of Code: _
_postgres=# \i curS.sql
CREATE FUNCTION
postgres=# oe print_dri dtl (" Amol");
 Output:
NOTICE: Amol 1001 “55 -15750
print_dri_dtl
(1 row)
3. Write a function to accept the bus_no, date & print its allotted driver.
create or replace function print_dri_bus(no integer, dt date ) returns int
as '
declare
~ Pec record;
begin
for rec in select dname,bus_no
from driver a , bus_driver b where b.bus_no=no
SS"
aad b.date_of_duty=dt and a.dno=b.dno
loop
raise notice ''% % '',rec.dname,rec.bus_nos
end loop;
_heturn 1;
end;
“LANGUAGE ‘plpgsql';
Execution of Code:
postgres=# \i curS.sql
CREATE FUNCTION
postgres=# select print_dri_bus(101, '2014-04-28");
Output:
NOTICE: Amol 101
print_dri_bus
i
(1 row)
Views: s
4. Which contains details of bus no 101 along with details of all drivers who have driven
that bus. S /
create view v51 as
select a.*
from driver a , bus_driver b
_ where b.bus_no=101
and a.dno=b.dno;
Execution of View:
postgres=# \i v5.sql
CREATE VIEW
select * from v51;
Output:
licno | address | Aaa I
(1 row)
2. To display the details of the buses that run on routes 1 a
create view v512 as .
select distinct b.* from route a: ahiese |
where b.route_no=1 or b.route_no=2 and a.route no=b . can
° — =0.rou e_no;
Execution of Code:
postgres=# \i v5.sql
CREATE VIEW
select * from v512;
Output:
‘bus_no | capacity |depot_name | route_no
wecneennenene wp ence enn n nnn ene fp nee ene nen nen nen cnn fp cnn ences cnn
102. | 20° | Hadapsar | 2
101 =| 35 | Hadapsar | 1;
(1 row) ,
3. To find out the name of the driver having maximum salary.
create view v53 as
select dname ,salary from driver
where salary = (select max(salary) from. driver Ms
Execution of View:
postgres=# \i v5.sql
CREATE VIEW
select * from v533.
tput
dname | salary
a4 nos, epee
Amol | 15750
_ (1row)
4. To accept the bus_no and date and print its allotted driver.
create view v54 as
select dname,bus_no from driver a, bus_driver b
where b.bus_no=102 and b. date_of_duty='2014-04-20'
and a.dno=b.dno;
Execution of Code:
postgres=# \i v5.sql
CREATE VIEW
_ select * from v54;
Output:
dname | bus_no
an pueante ease
Ashok | 102
Assignments
Execution of Code:
postgres=# \i v5.sql
CREATE VIEW******************************************************************************************************************
select * from v512;
Output:
‘bus_no | capacity | depot_name | route_no
weneeenannens Hh nen nn nnn n nn nnnnn ob nan nn nnn en nnn nn nn fp nen ne en ene ne ee
102 | £20 | Hadapsar | 2
| _ 101 | 35 | Hadapsar | A;
(1 row) |
3. To find out the name of the driver having maximum salary.
create view v53 as
select dname ,salary from driver
where salary = (select max(salary) from driver );
Execution of View: ;
postgres=# \i v5.sql
CREATE VIEW
select * from v533.
Output:
Amol | 15750
(1 row) :
4, To accept the bus_no and date and print its allotted driver.
create view v54 as
select dname,bus_no from driver a, bus_driver b
where b.bus_no=102 and b.date_of_duty='2014-04-20'
and a.dno=b.dno; ,
Execution of Code:
postgres=# \i v5.sql
CREATE VIEW
select * from v54;
Output:
_|dname | bus_no
o--2------ sponnnennnnnnn
Ashok | 102

Exceptions:*******************************************************************************************************************
1. Write a stored function to accept the bus_no and date and print its allotted drivers.
Raise an exception in case of invalid bus number.
create or replace function print_dri_bus(no integer, dt date ) returns int
as *
declare
rec record;
begin
select * into rec from bus_driver where bus_no = no and date_of_duty=dt;
if NOT FOUND then
raise exception ‘'Invalid bus no'';
end if;
for rec in select dname,bus_no
from driver a , bus _driver b
where b.bus_no=no and b.date_of_duty=dt and a.dno=b.dno
loop
raise notice ‘'% % '',rec.dname,rec.bus_no;
end loop;
return 1;
end;
"LANGUAGE ‘plpgsql';
Execution of Code:
postgres=# \i fun5.sql
CREATE FUNCTION

postgres=# select print_dri_bus(11, '2014-04-290');
Output:
ERROR: Invalid bus no
postgres=# select print_dri_bus(101, '2014-@4-20');
NOTICE: Amol 101
print_dri_bus

 

 

 

 

 

*
¢, ‘a
ae tee

 

A FQ
